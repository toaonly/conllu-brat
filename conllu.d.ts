/** Declaration file generated by dts-gen */

declare namespace conllu {
    class Document {
        constructor();

        log(message: any): void;

        logError(message: any): void;

        parse(input: any, logger: any, strict: any): any;

        reset(): void;

        toBrat(logger: any, includeEmpty: any): any;

    }

    class Element {
        constructor(fields: any, lineidx: any, line: any);

        dependencies(skipHead: any): any;

        features(): any;

        isEmptyNode(): any;

        isMultiword(): any;

        isToken(inRange: any): any;

        isWord(): any;

        rangeFrom(): any;

        rangeTo(): any;

        repair(log: any): any;

        validHeadReference(elementById: any): any;

        validate(): any;

        validateDeprel(deprel: any, issues: any): any;

        validateDeps(deps: any, issues: any): any;

        validateFeats(feats: any, issues: any): any;

        validateField(field: any, name: any, issues: any, allowSpace: any): any;

        validateForm(form: any, issues: any): any;

        validateHead(head: any, issues: any): any;

        validateId(id: any, issues: any): any;

        validateLemma(lemma: any, issues: any): any;

        validateMisc(misc: any, issues: any): any;

        validateUpostag(upostag: any, issues: any): any;

        validateXpostag(xpostag: any, issues: any): any;

    }

    class Sentence {
        constructor(sentenceId: any, elements: any, comments: any);

        addError(issue: any, element: any, issues: any): void;

        bratAttributes(includeEmpty: any): any;

        bratComments(includeEmpty: any): any;

        bratLabel(): any;

        bratRelations(includeEmpty: any): any;

        bratSpans(includeEmpty: any): any;

        bratStyles(includeEmpty: any): any;

        bratText(includeEmpty: any): any;

        bratTokens(): any;

        bratWords(includeEmpty: any): any;

        dependencies(): any;

        elementById(): any;

        multiwords(): any;

        repair(log: any): any;

        repairEmptyNodeSequence(log: any): any;

        repairMultiwordSequence(log: any): any;

        repairReferences(log: any): any;

        repairUniqueIds(log: any): any;

        repairWordSequence(log: any): any;

        setBaseOffset(baseOffset: any): void;

        toBrat(includeEmpty: any): any;

        tokens(): any;

        validate(): any;

        validateEmptyNodeSequence(issues: any): any;

        validateMultiwordSequence(issues: any): any;

        validateReferences(issues: any): any;

        validateUniqueIds(issues: any): any;

        validateWordSequence(issues: any): any;

        words(includeEmpty: any): any;

    }

}

